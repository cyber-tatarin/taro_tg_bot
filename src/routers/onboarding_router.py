from datetime import datetime
from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext

from src.data.config import settings
from src.middlewares.uow_middleware import UoWSessionMiddleware
from src.services.bot_service import send_daily_prediction_message, send_remind
from src.services.geo_service import GeoService
from src.services.gsheets_service import GSheetService
from src.services.sheduler_service import ShedulerService
from src.services.user_service import UserService
from src.states.onboarding_state import OnbordingState
from src.keyboards.keyboards import (
    advice_keyboard_builder,
    user_data_keyboard,
    user_location_keyboard,
    user_birthdate_keyboard,
    menu_keyboard
)
from src.utils.database.uow import InitUoW
from src.utils.loader import bot


router = Router()
router.message.middleware(UoWSessionMiddleware())
router.callback_query.middleware(UoWSessionMiddleware())

@router.message(CommandStart(ignore_case=True))
async def start(message: types.Message, state: FSMContext, uow: InitUoW):
    user_id = message.from_user.id
    if await UserService.get_user(user_id=message.from_user.id, uow=uow):
        return
    await state.clear()
    await state.get_state()
    await state.update_data(onboarding='onboarding')
    admin_link = f'<a href="{settings.admin_tg_link}">–Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–∫—É</a>'
    await message.answer(
        f'–ú–æ–∏ —Å–æ–≤–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –ª—É–Ω–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, —Ç–∞–∫ —á—Ç–æ –≥–æ—Ç–æ–≤—å—Å—è –∫ –≤–æ–ª—à–µ–±—Å—Ç–≤—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å, –∏ –±—É–¥–µ—Ç –∑–¥–æ—Ä–æ–≤–æ, –µ—Å–ª–∏ —Ç—ã –ø–æ–ø—Ä–æ–±—É–µ—à—å —Å–ª–µ–¥–æ–≤–∞—Ç—å –º–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º. –î–∞–≤–∞–π –Ω–∞–π–º–µ–º –∑–≤–µ–∑–¥—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–∏—Å—Ç–æ–≤ —Ç–≤–æ–µ–≥–æ –¥–Ω—è üåù\n\n–°–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, —Ç–∞–∫ —á—Ç–æ –æ—á–µ–Ω—å –ø—Ä–æ—à—É —Ç–µ–±—è –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Å–¥–µ–ª–∞—Ç—å –∏—Ö –µ—â–µ —Ç–æ—á–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ –¥–ª—è —Ç–µ–±—è. –°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –µ—â—ë –±–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π, –∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ. –ê —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—à—å {admin_link} üòâ\n\n–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ–µ, —á—Ç–æ–±—ã –¥–∞–∂–µ –∑–≤–µ–∑–¥—ã –æ–±–∑–∞–≤–∏–¥–æ–≤–∞–ª–∏—Å—å!',
        reply_markup=menu_keyboard,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ø–æ –∏–º–µ–Ω–∏ –≤ –Ω–∞—à–∏—Ö –∑–≤—ë–∑–¥–Ω—ã—Ö –±–µ—Å–µ–¥–∞—Ö?',
        reply_markup=user_data_keyboard
    )
    await state.set_state(OnbordingState.get_user_name)
    await GSheetService.register_user(
        tg_id=user_id#, username=message.from_user.username
    )

async def user_input_location(message: types.Message, state: FSMContext):
    await state.set_state(OnbordingState.get_user_location)
    await message.answer(
        '–ê –≥–¥–µ —Ç—ã –ø—Ä–æ–∂–∏–≤–∞–µ—à—å, —á—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —É—á–µ—Å—Ç—å —ç—Ç–æ –≤ –Ω–∞—à–µ–º –∑–≤–µ–∑–¥–Ω–æ–º –ø—Ä–æ–≥–Ω–æ–∑–µ?',
        reply_markup=user_location_keyboard
    )


#### USER INPUT 2 = NAME
@router.callback_query(F.data == 'user_data_no')
async def user_data_no(
    query: types.CallbackQuery, state: FSMContext, uow: InitUoW
):
    user_id = query.message.chat.id
    await query.message.delete_reply_markup()
    
    await query.message.answer(
        '–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º! –ë—É–¥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –∫–∞–∫ –∫ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–∑–Ω–∞–∫–æ–º–∫–µ. –ù–∞—à–∏ –∑–≤—ë–∑–¥–Ω—ã–µ –±–µ—Å–µ–¥—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –±—É–¥—É—Ç –ø–æ–ª–Ω—ã –º–∞–≥–∏–∏ –∏ –≤–æ–ª—à–µ–±—Å—Ç–≤–∞. ‚ú®',
        # reply_markup=advice_keyboard_builder(1)
    )
    await query.answer()
    await user_input_location(query.message, state)
    # await state.update_data({
    #     "function_call_number": 1
    # })
    # await ShedulerService.add_reminders_job(
    #     send_remind,
    #     user_id=user_id,
    #     state=state,
    #     day=1
    # )
    # await ShedulerService.add_main_job(
    #     send_daily_prediction_message,
    #     user_id, state, uow
    # )
    
@router.callback_query(F.data == 'user_data_yes')
async def user_data_yes(
    query: types.CallbackQuery, state: FSMContext, uow: InitUoW
):
    user_id = query.message.chat.id
    await query.message.delete_reply_markup()
    await query.message.answer(
        '–ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è',
        # reply_markup=advice_keyboard_builder(1)
    )
    await state.set_state(OnbordingState.get_user_name)
    await query.answer()


@router.message(OnbordingState.get_user_name)
async def get_user_name(message: types.Message, state: FSMContext, uow: InitUoW):

    
    await message.answer(f'–°–ø–∞—Å–∏–±–æ, {message.text}! –¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ. –ë—É–¥–µ—Ç –∑–¥–æ—Ä–æ–≤–æ, –µ—Å–ª–∏ –Ω–∞—à–∏ –∑–≤—ë–∑–¥–Ω—ã–µ –±–µ—Å–µ–¥—ã —Å—Ç–∞–Ω—É—Ç –µ—â—ë –±–æ–ª–µ–µ —É—é—Ç–Ω—ã–º–∏. üåü')
    await state.update_data(name=message.text)
    await state.set_state()
    await user_input_location(message, state)
####

async def user_input_birthdate(message: types.Message, state: FSMContext):
    await state.set_state(OnbordingState.get_user_birthdate)
    await message.answer(
        '–ß—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.',
        reply_markup=user_birthdate_keyboard
    )
    
#### USER INPUT 2 = Location
@router.callback_query(F.data == 'user_location_yes')
async def user_location_yes(
    query: types.CallbackQuery, state: FSMContext, uow: InitUoW
):
    await query.message.delete_reply_markup()
    await query.message.answer(
        "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥"
    )
    await query.answer()
    await state.set_state(OnbordingState.get_user_location)
    # return await user_input_birthdate(query.message, state)

@router.message(OnbordingState.get_user_location)
async def get_user_location(
    message: types.Message, state: FSMContext
):
    city = message.text.capitalize()
    if await GeoService.city_exists(city):
        await state.update_data(location=city)
        await message.answer('–ö–ª–∞—Å—Å, —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∏–º!')
        await state.set_state()
        return await user_input_birthdate(message, state)
    await message.answer('–•–º, –∫–∞–∂–µ—Ç—Å—è, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –∑–≤–µ–∑–¥—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–ª–∏, –≥–¥–µ —Ç—ã!')
    await state.set_state(OnbordingState.get_user_location2)

@router.message(OnbordingState.get_user_location2)
async def get_user_location2(
    message: types.Message, state: FSMContext
):
    city = message.text.capitalize()
    if await GeoService.city_exists(city):
        await state.update_data(location=city)
        await message.answer('–ö–ª–∞—Å—Å, —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∏–º!')
    else:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.. –ø–æ–∫–∞ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –±—É–¥—É —Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.')
    await state.set_state()
    return await user_input_birthdate(message, state)
    

@router.callback_query(F.data == 'user_location_no')
async def user_location_no(
    query: types.CallbackQuery, state: FSMContext, uow: InitUoW
):
    await query.message.delete_reply_markup()
    await query.answer()
    await query.message.answer(
        "–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ —Ç–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å - –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏"
    )
    return await user_input_birthdate(query.message, state)

####
    
async def finish_onboarding(message: types.Message, state: FSMContext, uow: InitUoW):
    user_id = message.chat.id
    print(user_id)
    await state.set_state()
    fsm_data = await state.get_data()
    is_data_change = fsm_data.get("data_change")
    birth_date = fsm_data.get('birth_date')
    if birth_date:
        birth_date = datetime.strptime(birth_date, "%d.%m.%Y").date()
    
    name = fsm_data.get('name')
    location = fsm_data.get('location')
    if name is None:
        name = ""
    if location is None:
        location = ""
    if birth_date is None:
        birth_date = ""

    if is_data_change:
        await message.answer(
            '–û—Ç–ª–∏—á–Ω–æ, –º—ã –∏–∑–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–±–µ!'
        )
        await UserService.update_user(
            user_id=user_id,
            name=name,
            location=location,
            birth_date=birth_date,
            uow=uow
        )
        return await GSheetService.update_user_data(
            tg_id=user_id,
            day=0,
            name=name,
            location=location,
            birth_date=birth_date,
        )
    await ShedulerService.add_reminders_job(
        send_remind,
        user_id=user_id,
        state=state,
        day=1
    )
    if await UserService.get_user(user_id=user_id, uow=uow):
        await UserService.update_user(
            user_id=user_id,
            name=name,
            location=location,
            birth_date=birth_date,
            uow=uow
        )
    else:
        await UserService.add_user(
            user_id=user_id,
            name=name,
            location=location,
            birth_date=birth_date,
            uow=uow
        )
    await message.answer(
        '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –ì–æ—Ç–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑?',
        reply_markup=advice_keyboard_builder(1)
    )
    await GSheetService.update_user_data(
        tg_id=user_id,
        day=0,
        name=name,
        location=location,
        birth_date=birth_date,
        forecast_no_reaction=0,
        forecast_rating_excellent=0,
        forecast_rating_good=0,
        forecast_rating_not_mine=0,
        received_forecasts=0
    )
    await state.update_data(onboarding=None)

    
#### USER INPUT 3 = birthdate
@router.message(OnbordingState.get_user_birthdate)
async def get_user_birthdate(
    message: types.Message, state: FSMContext, uow: InitUoW
):
    user_id = message.from_user.id
    try:
        date_object = datetime.strptime(message.text, "%d.%m.%Y").date()
        if date_object.year < 1900:
            raise ValueError
    except ValueError:
        return await message.answer(
            "–û–π, –∫–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–º–æ–≥–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.1985.",
            reply_markup=user_birthdate_keyboard
        )
    except Exception as e:
        print(e)
        # await state.clear()
        return await state.set_state()

    await state.update_data(birth_date=message.text)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è —Å–º–æ–≥—É –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã, —É—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ù–∞—à–∏ –∑–≤—ë–∑–¥–Ω—ã–µ –±–µ—Å–µ–¥—ã —Å—Ç–∞–Ω—É—Ç –µ—â—ë —Ç–æ—á–Ω–µ–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ. üåü"
    )
    await finish_onboarding(message, state, uow)
    
@router.callback_query(F.data == 'user_birthdate_no')
async def user_birthdate_no(
    query: types.CallbackQuery, state: FSMContext, uow: InitUoW
):
    await query.message.delete_reply_markup()
    await query.answer()
    await query.message.answer(
        "–ü–æ–Ω–∏–º–∞—é, –µ—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è. –ë—É–¥—É –¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –±–µ–∑ —ç—Ç–æ–≥–æ, –Ω–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ–∑–∂–µ. ‚ú®"
    )
    await finish_onboarding(query.message, state, uow)

@router.callback_query(F.data == 'user_birthdate_yes')
async def user_birthdate_yes(
    query: types.CallbackQuery, state: FSMContext, uow: InitUoW
):
    await query.message.delete_reply_markup()
    await query.answer()
    await query.message.answer(
        "–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.1985"
    )
    await state.set_state(OnbordingState.get_user_birthdate)