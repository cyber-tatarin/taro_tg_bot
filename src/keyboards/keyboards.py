import logging
from typing import Literal

from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder


logger = logging.getLogger(__name__)


# class PipeCallback(CallbackData, prefix="pipe"):
#     _default_callback_data = "pipe_callback"
#     callback_data: str | None = (_default_callback_data,)
#     pipe_id: int | None = None
#     next_task: int | None = None


# class DataCallback(CallbackData, prefix="voice"):
#     voice_gender: str


# voice_change_keyboard = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [
#             InlineKeyboardButton(text="Male", callback_data=VoiceCallback(
#                 voice_gender="voice_change_male"
#             ).pack()),
#             InlineKeyboardButton(text="Female", callback_data=VoiceCallback(
#                 voice_gender="voice_change_female"
#             ).pack())
#         ],
#     ],
# )
user_data_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–∞–ø–∏—à—É –∏–º—è",
                callback_data='user_data_yes'
            ),
        ],
        [
            InlineKeyboardButton(
                text="–û—Å—Ç–∞–Ω—É—Å—å —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –Ω–µ–∑–Ω–∞–∫–æ–º–∫–æ–π ü§´",
                callback_data='user_data_no'
            )
        ],
    ],
)

user_location_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–∞–ø–∏—à—É –≥–æ—Ä–æ–¥",
                callback_data='user_location_yes'
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ì–¥–µ-–≥–¥–µ.. —è –≤ –¥–æ–º–∏–∫–µ üè°",
                callback_data='user_location_no'
            )
        ],
    ],
)

user_birthdate_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–∞–ø–∏—à—É –¥–∞—Ç—É",
                callback_data='user_birthdate_yes'
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ü—Ä–æ–¥–æ–ª–∂—É –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ ü•∑",
                callback_data='user_birthdate_no'
            )
        ],
    ],
)


first_advice_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π "—Å–æ–≤–µ—Ç –¥–Ω—è"', callback_data='get_first_advice')
        ],
    ],
)


# estimate_keyboard = InlineKeyboardMarkup(
#     inline_keyboard=[
#         [
#             InlineKeyboardButton(text='–ù–µ –º–æ—ë üôÑ', callback_data='estimate_1'),
#             InlineKeyboardButton(text='–•–æ—Ä–æ—à–æ ‚ù§Ô∏è', callback_data='estimate_2'),
#             InlineKeyboardButton(text='–í–æ—Å—Ç–æ—Ä–≥ üî•', callback_data='estimate_3'),
#         ],
#     ],
# )


class EstimateCallback(CallbackData, prefix="estimate"):
    estimate: int
    choosed_category: int | None
    day: int


class AdviseCallback(CallbackData, prefix="advise"):
    day: int


advice_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='‚ú® –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚ú®', callback_data='get_advice')
        ],
    ],
)


def advice_keyboard_builder(day: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text='‚ú® –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ‚ú®',
        callback_data=AdviseCallback(
            day=day
        ).pack(),
    )
    
    builder.adjust(1)
    return builder.as_markup(resize_keyboard=True, selective=True)


def estimate_keyboard_builder(day: int, choosed_category: int | None = None) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    texts = ['–ù–µ –º–æ—ë üôÑ', '–•–æ—Ä–æ—à–æ ‚ù§Ô∏è', '–í–æ—Å—Ç–æ—Ä–≥ üî•']
    for idx, text in enumerate(texts):
        builder.button(
            text=text,
            callback_data=EstimateCallback(
                estimate=idx,
                choosed_category=choosed_category,
                day=day
            ).pack()
        )
    
    builder.adjust(3)
    return builder.as_markup(resize_keyboard=True, selective=True)


# def create_pipe_kb(
#     data: TaskData | None, pipe_id: int | None, next_task: int, is_h2_completed: bool
# ) -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()

#     if data.final:
#         return None

#     if data.buttons:
#         for title, callback in data.buttons.items():
#             pipe_id_to_insert = pipe_id
#             next_task_to_insert = next_task
#             if callback:
#                 pipe_id_to_insert = None
#                 next_task_to_insert = None
#             else:
#                 callback = "continue"
#             builder.button(
#                 text=title,
#                 callback_data=PipeCallback(
#                     callback_data=callback,
#                     pipe_id=pipe_id_to_insert,
#                     next_task=next_task_to_insert,
#                 ).pack(),
#             )

#         if is_h2_completed:
#             builder.button(
#                 text="Ask question",
#                 callback_data=PipeCallback(
#                     callback_data="ask question").pack(),
#             )
#         builder.adjust(1)
#         return builder.as_markup(resize_keyboard=True, selective=True)
#     else:
#         builder.button(
#             text="continue",
#             callback_data=PipeCallback(
#                 callback_data="continue", pipe_id=pipe_id, next_task=next_task
#             ).pack(),
#         )
#         return builder.as_markup(resize_keyboard=True, selective=True)

menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [
            # KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"),
            KeyboardButton(text="–ë—É–¥—É—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"),
        ],
        # [
        #     KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ")
        # ]
        
    ],
    resize_keyboard=True,
    # input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–¥–∞—á–∏"
)

    
new_features_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–†–∞—Å–∫–ª–∞–¥ –¢–ê–†–û',
                callback_data='tarot_spread'
            ),
        ],
        [
            InlineKeyboardButton(
                text='–¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Å–Ω–æ–≤',
                callback_data='dream_interpretation'
            )
        ],
        [
            InlineKeyboardButton(
                text='–ù—É–º–µ—Ä–æ–ª–æ–≥ –≤ –∫–∞—Ä–º–∞–Ω–µ',
                callback_data='pocket_numerologist'
            ),
        ],
        [
            InlineKeyboardButton(
                text='–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥',
                callback_data='personal_astrologer'
            )
        ],
    ],
)


class NewFeaturesCallback(CallbackData, prefix="features"):
    feature: str
    key: int


tarot_spread_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–î–∞, –æ–≥–æ–Ω—å üî•',
                callback_data=NewFeaturesCallback(
                    feature='tarot_spread',
                    key=0
                ).pack()
            ),
            InlineKeyboardButton(
                text='–ù–µ –∑–Ω–∞—é',
                callback_data=NewFeaturesCallback(
                    feature='tarot_spread',
                    key=1
                ).pack()
            )
        ]
    ],
)

dream_interpretation_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–û—á–µ–Ω—å –Ω–∞–¥–æ üåù',
                callback_data=NewFeaturesCallback(
                    feature='dream_interpretation',
                    key=0
                ).pack()
            ),
            InlineKeyboardButton(
                text='–Ø –Ω–µ –≤–∏–∂—É —Å–Ω—ã',
                callback_data=NewFeaturesCallback(
                    feature='dream_interpretation',
                    key=1
                ).pack()
            )
        ]
    ],
)
pocket_numerologist_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üòÆ',
                callback_data=NewFeaturesCallback(
                    feature='pocket_numerologist',
                    key=0
                ).pack()
            ),
            InlineKeyboardButton(
                text='–ù—É –Ω–µ –∑–Ω–∞—é',
                callback_data=NewFeaturesCallback(
                    feature='pocket_numerologist',
                    key=1
                ).pack()
            )
        ]
    ],
)
personal_astrologer_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(
                text='–ó–∞–≤–µ—Ä–Ω–∏—Ç–µ –∏ –ø–æ –±—ã—Å—Ç—Ä–µ–µ',
                callback_data=NewFeaturesCallback(
                    feature='personal_astrologer',
                    key=0
                ).pack()
            ),
            InlineKeyboardButton(
                text='–≠—Ç–æ –ø—Ä–∞–≤–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ?',
                callback_data=NewFeaturesCallback(
                    feature='personal_astrologer',
                    key=1
                ).pack()
            )
        ]
    ],
)