
import asyncio
from aiogram.fsm.context import FSMContext
from src.data.config import settings
from src.keyboards.keyboards import advice_keyboard_builder, estimate_keyboard_builder
from src.schemas.user_schemas import User
from src.services.gsheets_service import GSheetService
from src.services.sheduler_service import ShedulerService
from src.services.taro_service import TaroService
from src.services.user_service import UserService
from src.utils.database.uow import UoW
from src.utils.get_state import get_user_state
from src.utils.loader import bot, scheduler


# async def send_remind(user_id: int, state: FSMContext, job_id: str, day: int):
async def send_remind(user_id: int, job_id: str, day: int):
    print('send_remind', user_id, job_id, day)
    # fsm_data = await state.get_data()
    job_interval = job_id.split('_')[1]
    
    if job_interval == str(settings.REMINER1_SECONDS):
        text = '–ü—Ä–∏–≤–µ—Ç! –ó–≤—ë–∑–¥—ã —É–∂–µ –≥–æ—Ç–æ–≤—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —Å–≤–æ–∏–º –º—É–¥—Ä—ã–º —Å–æ–≤–µ—Ç–æ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å —É–∑–Ω–∞—Ç—å, —á—Ç–æ –æ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è —Ç–µ–±—è! ‚ú® –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ" –∏ –æ—Ç–∫—Ä–æ–π –¥–ª—è —Å–µ–±—è –º–∞–≥–∏—é –¥–Ω—è.'
    if job_interval == str(settings.REMINER2_SECONDS):
        text = '–≠–π, –Ω–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ –∑–≤—ë–∑–¥–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑! –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ–ª–æ–Ω —Ç–∞–π–Ω –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ –∂–¥—É—Ç, —á—Ç–æ–±—ã —Ç—ã –∏—Ö –æ—Ç–∫—Ä—ã–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ" –∏ –¥–∞–π –≤–æ–ª—à–µ–±—Å—Ç–≤—É –≤–æ–π—Ç–∏ –≤ —Ç–≤–æ—é –∂–∏–∑–Ω—å. üåü'
    if job_interval == str(settings.REMINER3_SECONDS):
        text = '–ö–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –º–Ω–æ–≥–æ –¥–µ–ª, –Ω–æ –∑–≤–µ–∑–¥—ã –Ω–µ –æ—Å—Ç–∞–≤—è—Ç —Ç–µ–±—è –±–µ–∑ –≤–Ω–∏–º–∞–Ω–∏—è. –ó–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å –¥–µ–Ω—å –æ—Å–æ–±–µ–Ω–Ω—ã–º. –ü—É—Å—Ç—å –≤–æ–ª—à–µ–±—Å—Ç–≤–æ –±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π! üåü'
    await bot.send_message(
        chat_id=user_id,
        text=text,
        # reply_markup=advice_keyboard_builder(day)
    )
    # await TaroService.send_remind(user_id, state)

    scheduler.remove_job(
       job_id=job_id
    )
    # count = fsm_data.get(f"remind_{day}")
    # await state.update_data({
    #     f"remind_{day}": count + 1
    # })

async def send_daily_prediction_message(user_id: int):
    uow = UoW()
    state = await get_user_state(user_id)
    fsm_data = await state.get_data()
    day = int(fsm_data.get("function_call_number")) + 1
    bot_answer = await TaroService.get_taro_predict(user_id=user_id, uow=uow)
    choosed_category = None
    if day == 1:
        pass
        # await bot.send_message(
        #     "–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ –≤–æ–ª—à–µ–±—Å—Ç–≤—É! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Ç–µ–±—è –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å –ª—É—á—à–µ. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –∏ –ø—É—Å—Ç—å –∑–≤–µ–∑–¥—ã –≤—Å–µ–≥–¥–∞ –æ—Å–≤–µ—â–∞—é—Ç —Ç–≤–æ–π –ø—É—Ç—å! ‚ú®",
        # )
        # count_interval_mapping = {
        #     1: settings.REMINER1_SECONDS,
        #     2: settings.REMINER2_SECONDS,
        #     3: settings.REMINER3_SECONDS
        # }
        
        # remind_count = fsm_data.get(f'remind_{day}')
        # # interval = count_interval_mapping[remind_count]
        # for key, value in count_interval_mapping.items():
        #     if remind_count < key:
        #         try:
        #             scheduler.remove_job(job_id=str(f'remind_{value}_{user_id}'))
        #         except Exception as e:
        #             print(e)
        #         print(f'remove remind_{value}_{user_id}' )
        
        # await asyncio.sleep(settings.first_advise_seconds)
        # await bot.send_message(
        #     chat_id=user_id,
        #     text=bot_answer,
        #     reply_markup=estimate_keyboard_builder(
        #         # choosed_category=choosed_category,
        #         day=day
        #     )
        # ) 
        # await GSheetService.update_user_data(
        #     tg_id=user_id,
        #     day=day,
        #     notifs=remind_count,
        #     with_current_time=True
        # )
                # bot_answer, choosed_category = await TaroService.get_taro_predict(user_id=user_id, uow=uow)
    else:
        await bot.send_message(
            chat_id=user_id,
            text=bot_answer,
            reply_markup=estimate_keyboard_builder(
                # choosed_category=choosed_category,
                day=day
            )
        )
        user: User = await UserService.get_user(user_id, uow=uow)
        received_forecasts = user.received_forecasts + 1
        forecast_no_reaction = user.forecast_no_reaction + 1
        await UserService.update_user(
            user_id=user_id,
            received_forecasts=received_forecasts,
            forecast_no_reaction=forecast_no_reaction,
            uow=uow
        )
        await GSheetService.update_user_data(
            tg_id=user_id,
            day=day,
            # notifs=remind_count,
            text=bot_answer,
            with_current_time=True,
            received_forecasts=received_forecasts,
            forecast_no_reaction=forecast_no_reaction
        )
        
        # if choosed_category:
        #     await UserService.add_choosed_category(
        #         user_id=user_id, category=choosed_category, uow=uow
        #     )
    # await ShedulerService.add_reminders_job(
    #     send_remind,
    #     user_id=user_id,
    #     state=state,
    #     day=day
    # )
    # await bot.send_message(
    #     chat_id=user_id,
    #     text='–ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π —Å–æ–≤–µ—Ç —Å–µ–≥–æ–¥–Ω—è',
    #     # reply_markup=advice_keyboard_builder(day)
    # )
    
    if day == settings.days_to_send:
        scheduler.remove_job(job_id=str(user_id))
    
    await state.update_data({
        "function_call_number": day
    })